{"ast":null,"code":"var _jsxFileName = \"/Users/shubbu/coding_stuff/WEB3/ReactJS/netflix-clone/netflix-clone/src/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nfunction Row(_ref) {\n  _s();\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]); //movies array is set to empty in the starting\n\n  useEffect(() => {\n    // if [],run once when the row loads and dont run it again\n\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //results fetched from the axios.get with fetchUrl are set into the setMovies array\n      setMovies(request.data.results);\n      return request;\n    }\n    //if [variable], it will run everytime variable is changed!!\n\n    fetchData();\n    //fetchUrl is passed below in[] because it is a parameter outside of useEffect and will help us change our setMovies array everytime.\n  }, [fetchUrl]);\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", title, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"row_poster\",\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.back}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","base_url","Row","_ref","_s","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","src","poster_path","back","alt","name","id","_c","$RefreshReg$"],"sources":["/Users/shubbu/coding_stuff/WEB3/ReactJS/netflix-clone/netflix-clone/src/Row.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl ,isLargeRow}) {\n  const [movies, setMovies] = useState([]); //movies array is set to empty in the starting\n\n  useEffect(() => {\n    // if [],run once when the row loads and dont run it again\n\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //results fetched from the axios.get with fetchUrl are set into the setMovies array\n      setMovies(request.data.results);\n      return request;\n    }\n    //if [variable], it will run everytime variable is changed!!\n\n    fetchData();\n    //fetchUrl is passed below in[] because it is a parameter outside of useEffect and will help us change our setMovies array everytime.\n  }, [fetchUrl]);\n\n  console.log(movies);\n  return (\n    <div className=\"row\">\n      <h2> {title} </h2>\n\n      <div className=\"row__posters\">\n        {/* container ->  several row posters */}\n\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            className=\"row_poster\"\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.back}`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,QAAQ,GAAG,sCAAsC;AAEvD,SAASC,GAAGA,CAAAC,IAAA,EAAiC;EAAAC,EAAA;EAAA,IAAhC;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAAJ,IAAA;EACzC,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1CD,SAAS,CAAC,MAAM;IACd;;IAEA,eAAec,SAASA,CAAA,EAAG;MACzB,MAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAG,CAACN,QAAQ,CAAC;MACzC;MACAG,SAAS,CAACE,OAAO,CAACE,IAAI,CAACC,OAAO,CAAC;MAC/B,OAAOH,OAAO;IAChB;IACA;;IAEAD,SAAS,CAAC,CAAC;IACX;EACF,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEdS,OAAO,CAACC,GAAG,CAACR,MAAM,CAAC;EACnB,oBACER,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBlB,OAAA;MAAAkB,QAAA,GAAI,GAAC,EAACb,KAAK,EAAC,GAAC;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAElBtB,OAAA;MAAKiB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAG1BV,MAAM,CAACe,GAAG,CAAEC,KAAK,iBAChBxB,OAAA;QAEEiB,SAAS,EAAC,YAAY;QACtBQ,GAAG,EAAG,GAAExB,QAAS,GAAEM,UAAU,GAAGiB,KAAK,CAACE,WAAW,GAAGF,KAAK,CAACG,IAAK,EAAE;QACjEC,GAAG,EAAEJ,KAAK,CAACK;MAAK,GAHXL,KAAK,CAACM,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAId,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClB,EAAA,CArCQF,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}