{"ast":null,"code":"var _jsxFileName = \"/Users/shubbu/coding_stuff/WEB3/ReactJS/netflix-clone/netflix-clone/src/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nfunction Row(_ref) {\n  _s();\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]); //movies array is set to empty in the starting\n\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    // if [],run once when the row loads and dont run it again\n\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //results fetched from the axios.get with fetchUrl are set into the setMovies array\n      setMovies(request.data.results);\n      return request;\n    }\n    //if [variable], it will run everytime variable is changed!!\n\n    fetchData();\n    //fetchUrl is passed below in[] because it is a parameter outside of useEffect and will help us change our setMovies array everytime.\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", title, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), trailerUrl, \" \", /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(Row, \"PJD8XGe3+ikEevBMWgthFjVZ1wI=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useEffect","useState","axios","Youtube","jsxDEV","_jsxDEV","base_url","Row","_ref","_s","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","poster_path","backdrop_path","alt","name","id","videoId","_c","$RefreshReg$"],"sources":["/Users/shubbu/coding_stuff/WEB3/ReactJS/netflix-clone/netflix-clone/src/Row.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]); //movies array is set to empty in the starting\n\n  const [trailerUrl,setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    // if [],run once when the row loads and dont run it again\n\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //results fetched from the axios.get with fetchUrl are set into the setMovies array\n      setMovies(request.data.results);\n      return request;\n    }\n    //if [variable], it will run everytime variable is changed!!\n\n    fetchData();\n    //fetchUrl is passed below in[] because it is a parameter outside of useEffect and will help us change our setMovies array everytime.\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars:{\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    }\n\n\n  }\n\n   const handleClick = (movie) => {\n    if(trailerUrl){\n      setTrailerUrl(\"\")\n    }\n\n\n\n   }\n\n\n  return (\n    <div className=\"row\">\n      <h2> {title} </h2>\n\n      <div className=\"row__posters\">\n        {/* container ->  several row posters */}\n\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n     {trailerUrl} <Youtube videoId={trailerUrl} opts={opts}/>\n    </div>\n  );\n}\n\nexport default Row;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,WAAW;AAClB,OAAOC,OAAO,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,QAAQ,GAAG,sCAAsC;AAEvD,SAASC,GAAGA,CAAAC,IAAA,EAAkC;EAAAC,EAAA;EAAA,IAAjC;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAAJ,IAAA;EAC1C,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1C,MAAM,CAACc,UAAU,EAACC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE/CD,SAAS,CAAC,MAAM;IACd;;IAEA,eAAeiB,SAASA,CAAA,EAAG;MACzB,MAAMC,OAAO,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAACR,QAAQ,CAAC;MACzC;MACAG,SAAS,CAACI,OAAO,CAACE,IAAI,CAACC,OAAO,CAAC;MAC/B,OAAOH,OAAO;IAChB;IACA;;IAEAD,SAAS,CAAC,CAAC;IACX;EACF,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEd,MAAMW,IAAI,GAAG;IACXC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,MAAM;IACbC,UAAU,EAAC;MACT;MACAC,QAAQ,EAAE;IACZ;EAGF,CAAC;EAEA,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAC9B,IAAGb,UAAU,EAAC;MACZC,aAAa,CAAC,EAAE,CAAC;IACnB;EAID,CAAC;EAGF,oBACEX,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzB,OAAA;MAAAyB,QAAA,GAAI,GAAC,EAACpB,KAAK,EAAC,GAAC;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAElB7B,OAAA;MAAKwB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAG1BjB,MAAM,CAACsB,GAAG,CAAEP,KAAK,iBAChBvB,OAAA;QAEE+B,OAAO,EAAEA,CAAA,KAAMT,WAAW,CAACC,KAAK,CAAE;QAClCC,SAAS,EAAG,cAAajB,UAAU,IAAI,iBAAkB,EAAE;QAC3DyB,GAAG,EAAG,GAAE/B,QAAS,GACfM,UAAU,GAAGgB,KAAK,CAACU,WAAW,GAAGV,KAAK,CAACW,aACxC,EAAE;QACHC,GAAG,EAAEZ,KAAK,CAACa;MAAK,GANXb,KAAK,CAACc,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOd,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACNnB,UAAU,EAAC,GAAC,eAAAV,OAAA,CAACF,OAAO;MAACwC,OAAO,EAAE5B,UAAW;MAACO,IAAI,EAAEA;IAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV;AAACzB,EAAA,CA/DQF,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AAiEZ,eAAeA,GAAG;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}